.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "tbmemtrace" "1" "2020-06-02" "Tbricks" "tbmemtrace man page"
.hy
.SH NAME
.PP
\f[C]tbmemtrace\f[R] \[en] analyzes memory usage.
.SH SYNOPSIS
.PP
\f[C]tbmemtrace\f[R] [\f[C]help\f[R]]
.PP
\f[C]tbmemtrace\f[R] <component>|<admin_server> [\f[C]--all\f[R]]
[\f[C]--clean\f[R]] [\f[C]--no-graph\f[R]] [\f[C]--output\f[R]
<directory>]
.PP
\f[C]tbmemtrace analyze\f[R] <file> [\f[C]--all\f[R]]
[\f[C]--no-graph\f[R]] [\f[C]--output <directory>\f[R]]
.SH DESCRIPTION
.PP
The \f[C]tbmemtrace\f[R] is a general-purpose utility for memory
consumption troubleshooting by analyzing memory usage.
When component or process memory allocation tracing is enabled, call
stack (backtrace) will be collected in each allocation point and traced
out with LTTng as an underlying infrastructure.
.PP
#SUBCOMMANDS
.TP
\f[B]\f[CB]tbmemtrace\f[B]\f[R] [\f[B]\f[CB]help\f[B]\f[R]]
Displays usage of the tool, including available subcommands and options.
.TP
\f[B]\f[CB]tbmemtrace\f[B]\f[R] <component>|<admin_server> [\f[B]\f[CB]--all\f[B]\f[R]] [\f[B]\f[CB]--clean\f[B]\f[R]] [\f[B]\f[CB]--no-graph\f[B]\f[R]] [\f[B]\f[CB]--output\f[B]\f[R] <directory>]
Generates flamegraph.
There are two kinds of flamegraphs are supported: combined stacks of
not-freed allocations only (default) and combined stacks of all
allocations regardless of whether they were freed or not (the
\f[C]--all\f[R] option).
.TP
\f[B]\f[CB]tbmemtrace analyze\f[B]\f[R] <file> [\f[B]\f[CB]--all\f[B]\f[R]] [\f[B]\f[CB]--no-graph\f[B]\f[R]] [\f[B]\f[CB]--output <directory>\f[B]\f[R]]
Analyzes raw memory tracing data.
.SH OPTIONS
.TP
\f[B]\f[CB]--all\f[B]\f[R]
shows all stacks for all allocations (not only not-freed ones).
.TP
\f[B]\f[CB]--clean\f[B]\f[R]
removes generated raw memory tracing data.
.TP
\f[B]\f[CB]--no-graph\f[B]\f[R]
prescribes not to make a flamegraph.
.TP
\f[B]\f[CB]--output\f[B]\f[R] <directory>
writes results in a specified directory.
.SH EXAMPLES
.PP
\f[B]Tracing of not-freed allocations\f[R]
.IP
.nf
\f[C]
$tbmemtrace <component|adimin server>

Press Ctrl-C to stop tracing...
\[ha]C
Results will be saved in ./tbmemtrace_<component|admin server>\[rs]_<node>\[rs]_<timestamp>

Allocated 246.873.600 bytes in 68.576 allocations (3.600 bytes average)
    operator new(unsigned long)      at new_op.cc:50:0
    tbricks::millistream_md::Instrument::Instrument(tbricks::millistream_md::Application, tbricks::types::UUID const&...)...
    tbricks::millistream_md::Application::do_get_instrument(unsigned long, bool)     at Application.h:229:46
    tbricks::millistream_md::Application::get_instrument(unsigned long, bool)        at Application.h:211:13
    tbricks::millistream_md::Application::create_instrument(unsigned long)   at Application.cpp:131:17
    tbricks::millistream_md::Application::consume_data()     at Application.cpp:555:21
    tbricks::millistream_md::DoConsume::operator()() const   at Application.cpp:484:5
    tbricks::util::AsyncCallerT<tbricks::util::UnnamedCaller>::Functor<tbricks::millistream_md::DoConsume>::call() ...
    tbricks::util::AsyncCallerT<tbricks::util::UnnamedCaller>::svc()         at AsyncCaller.h:143:17
    ACE_Task_Base::svc_run(void)    at Task.cpp:275:0
    ACE_Thread_Adapter::invoke()     at Thread_Adapter.cpp:98:0
    start_thread             from libpthread-2.17.so
    \[rs]__clone                  from libc-2.17.so

Allocated 74.062.080 bytes in 68.576 allocations (1.080 bytes average)
    operator new(unsigned long)      at new_op.cc:50:0
    tbricks::millistream_md::Application::do_get_instrument(unsigned long, bool)     at Application.h:229:42
    tbricks::millistream_md::Application::get_instrument(unsigned long, bool)        at Application.h:211:13
    tbricks::millistream_md::Application::create_instrument(unsigned long)   at Application.cpp:131:17
    tbricks::millistream_md::Application::consume_data()     at Application.cpp:555:21
    tbricks::millistream_md::DoConsume::operator()() const   at Application.cpp:484:5
    tbricks::util::AsyncCallerT<tbricks::util::UnnamedCaller>::Functor<tbricks::millistream_md::DoConsume>::call() const ...
    tbricks::util::AsyncCallerT<tbricks::util::UnnamedCaller>::svc()         at AsyncCaller.h:143:17
    ACE_Task_Base::svc_run(void)    at Task.cpp:275:0
    ACE_Thread_Adapter::invoke()     at Thread_Adapter.cpp:98:0
    start_thread             from libpthread-2.17.so
    \[rs]__clone                  from libc-2.17.so

\&.
\&.
\&.
$
\f[R]
.fi
.PP
\f[B]Generating flamegraph\f[R]
.IP
.nf
\f[C]
$tbmemtrace <component|adimin server>
(tbmemtrace.<component|adimin server>.svg file with flamegraph will be created automatically in current directory)
\f[R]
.fi
.SH KNOWN ISSUES
.PP
Tracing of a java-enabled component or process is not recommended and
may lead to unstable behavior of traced process or component.
.SH EXIT STATUS
.PP
The following exit values are returned:
.IP \[bu] 2
0: Successful completion.
.IP \[bu] 2
1: An error occurred.
.IP \[bu] 2
2: Invalid command line options were specified.
.SH SEE ALSO
.PP
\f[C]tbsample\f[R](1)
