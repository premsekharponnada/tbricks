.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "tbcore" "1" "2020-06-02" "Tbricks" "tbcore man page"
.hy
.SH NAME
.PP
\f[C]tbcore\f[R] \[en] automates working with core files.
.SH SYNOPSIS
.PP
\f[C]tbcore\f[R] [\f[C]-e\f[R] <exe_fname>] [\f[C]-d\f[R]<dst_dir>]
[\f[C]-l\f[R] <lib_dirs>] [\f[C]-n\f[R]] [\f[C]-t\f[R] <core_datetime>]
[\f[C]-u\f[R] <user>] [\f[C]-k\f[R]] [\f[C]-c\f[R]] [\f[C]-z\f[R]
<number>] [\f[C]-v\f[R]] [\f[C]-p\f[R]]
<PID>|<core_filename>|<core_filemask> [\&...]
.PP
\f[C]tbcore -x\f[R] <core_tarball_filename>
.PP
\f[C]tbcore -a\f[R] <core_desc_fname1>[ <core_desc_fname2>\&...]
.SH DESCRIPTION
.PP
The \f[C]tbcore\f[R] tool is used for several purposes.
.IP "1." 3
Collecting core files and other data needed for debugging into core
tarballs and core description XML-format files.
The data is core date and time, core filename, java fatal log if
present, process `argv' array, backtraces of all threads, threads state,
loaded dynamic libraries (.so), process memory map, process credentials,
process auxiliary vector, machine name, OS name, release and version,
hardware name, processor type, environment variables (as they were set
for the process).
.IP "2." 3
Extracting core tarball and opening core in debugger ready for
debugging.
.IP "3." 3
Analyzing core description files to find similar backtraces of signaled
threads.
.SH SUBCOMMANDS
.PP
\f[B]The following subcommands are supported:\f[R]
.TP
\f[B]\f[CB]tbcore\f[B]\f[R] [\f[B]\f[CB]-h\f[B]\f[R]]
Displays usage of the tool, including available subcommands and options.
.TP
\f[B]\f[CB]tbcore\f[B]\f[R] [\f[B]\f[CB]-e\f[B]\f[R] <exe_fname>] [\f[B]\f[CB]-d\f[B]\f[R]<dst_dir>] [\f[B]\f[CB]-l\f[B]\f[R] <lib_dirs>] [\f[B]\f[CB]-n\f[B]\f[R]] [\f[B]\f[CB]-t\f[B]\f[R] <core_datetime>] [\f[B]\f[CB]-u\f[B]\f[R] <user>] [\f[B]\f[CB]-k\f[B]\f[R]] [\f[B]\f[CB]-c\f[B]\f[R]] [\f[B]\f[CB]-z\f[B]\f[R] <number>] [\f[B]\f[CB]-v\f[B]\f[R]] [\f[B]\f[CB]-p\f[B]\f[R]] <PID>|<core_filename>|<core_filemask> [\&...]
Creates core tarball and description.
.RS
.PP
Where:
.TP
<PID>|<core_filename>|<core_filemask>
ID of process, core filename or core files mask (\f[C]*\f[R] for all
core files, for instance).
Several such arguments can be passed.
.TP
<core_filename>
Core file name.
.TP
<core_filemask>
Core files mask (\f[C]*\f[R] for all core files, for instance).
Several such arguments can be passed
.TP
\f[B]\f[CB]-e\f[B]\f[R] <exe_fname>
Binary executable filename of the process or core (may be mandatory).
.TP
\f[B]\f[CB]-d\f[B]\f[R] <dst_dir>
Directory to place the process/core description and tarball files.
.TP
\f[B]\f[CB]-l\f[B]\f[R] <lib_dirs>
Colon-separated list of libraries directories.
.TP
\f[B]\f[CB]-n\f[B]\f[R]
Do not create core tarball (description only).
.TP
\f[B]\f[CB]-t\f[B]\f[R] <core_datetime>
The core datetime (in [yy]yy-mm-dd_hh-mm[-ss] format)
.TP
\f[B]\f[CB]-u\f[B]\f[R] <user>
The name of the user that runs the process or has created the core.
.TP
\f[B]\f[CB]-p\f[B]\f[R]
Do not unpack tarball (already unpacked in current directory).
.TP
\f[B]\f[CB]-k\f[B]\f[R]
Keep core file after creating core tarball
.TP
\f[B]\f[CB]-c\f[B]\f[R]
Use gzip for compression (instead of bzip2 used by default).
.TP
\f[B]\f[CB]-z\f[B]\f[R] <zip timeout>
Time-out in seconds to create/extract archive, default is 1200.
.TP
\f[B]\f[CB]-v\f[B]\f[R]
Print verbose output.
.RE
.TP
\f[B]\f[CB]tbcore -x\f[B]\f[R] <core_tarball_filename>
Extracts core tarball and opens core in debugger.
.TP
\f[B]\f[CB]tbcore -a\f[B]\f[R] <core_desc_fname1>[ <core_desc_fname2>\&...]
Analyzes core description(s).
.SH EXAMPLES
.PP
\f[B]Creating core tarball and description for known PID\f[R]
.IP
.nf
\f[C]
   $ tbcore 17191
   CORE COLLECTOR begins:
     /usr/bin/coreadm
   PROCESSING \[cq]/cores/check_sigsev.17191\[cq]:
     /usr/bin/pargs -aex /cores/check_sigsev.17191
     /usr/bin/pcred -a /cores/check_sigsev.17191
     /usr/bin/pflags -r /cores/check_sigsev.17191
     /usr/bin/pldd /cores/check_sigsev.17191
     uname -snrvmp
     /usr/bin/pmap -l /cores/check_sigsev.17191
     /tb/soft/sun/x86_64/studio/SUNWspro/bin/dbx -c \[cq]exit\[cq] -fq -s ./tbcore_dbg_cmds.IyJcrkBLaR6xcGmnpL
    Debug commands: \[cq]debug /home/asp/trunk/build.x86_64-unknown-linux/platform/bin64/check_sigsev /cores/check_sigsev.17191\[cq], \[cq]lwps\[cq]
     /tb/soft/sun/x86_64/studio/SUNWspro/bin/dbx -c \[cq]exit\[cq] -fq -s ./tbcore_dbg_cmds.9sv8XAtX8hQp3nahl8
    Debug commands: \[cq]debug /home/asp/trunk/build.x86_64-unknown-linux/platform/bin64/check_sigsev /cores/check_sigsev.17191\[cq], \[cq]lwp l\[at]1\[cq], \[cq]where -h -l -v\[cq]
     pack_files(\[cq]check_sigsev.17191.core.xml /home/asp/trunk/build.x86_64-unknown-linux/platfo...\[cq], \[cq]/home/asp/trunk/tests/xtestsystem/checkrc2/check_sigsev.17191.core\[cq], 1200, ()):
    /home/asp/trunk/toolchain/x86_64-unknown-linux/bin/tbtar -chf \[cq]check_sigsev.1...
   /home/asp/trunk/toolchain/x86_64-unknown-linux/bin/tbtar: Removing leading \[oq]/\[cq] from member names
    gzip -f9 \[cq]check_sigsev.17191.core.tar\[cq]
     pack_files().
     Tarball:     \[cq]check_sigsev.17191.core.tar.gz\[cq]
     Description: \[cq]check_sigsev.17191.core.xml\[cq]
   CORE COLLECTOR ends.
   $
\f[R]
.fi
.PP
\f[C]tbcore\f[R] output is not shown in the following examples because
it is the same.
.PP
\f[B]Creating core tarball and description for known core filename\f[R]
.IP
.nf
\f[C]
   $ tbcore /cores/grid_backend.666
\f[R]
.fi
.PP
\f[B]Creating core description for PID\f[R]
.IP
.nf
\f[C]
   $ tbcore -n 12345
\f[R]
.fi
.PP
\f[B]Creating 2 core tarball and description for 2 core filenames\f[R]
.IP
.nf
\f[C]
   $ tbcore /cores/core.456 market_data.678
\f[R]
.fi
.PP
\f[B]Creating core description(s) for core filemask\f[R]
.IP
.nf
\f[C]
   $ tbcore -n trading*
\f[R]
.fi
.PP
\f[B]Creating 2 core description for core filename and PID\f[R]
.IP
.nf
\f[C]
   $ tbcore -n market_data.5678 34567
\f[R]
.fi
.PP
\f[B]Open core tarball in debugger\f[R]
.IP
.nf
\f[C]
   $ tbcore -x grid_backend.666.core.tar.gz
\f[R]
.fi
.PP
\f[B]Analyze core descriptions\f[R]
.IP
.nf
\f[C]
   $ tbcore -a strategy_engine.\[rs]*.core.xml
\f[R]
.fi
.SH EXIT STATUS
.PP
The following exit values are returned:
.IP \[bu] 2
0: Successful completion.
.IP \[bu] 2
1: Invalid command line options were specified.
.IP \[bu] 2
Other: An error occurred.
.SH SEE ALSO
.PP
\f[C]tbintro\f[R](1), \f[C]tbaudit\f[R](1), \f[C]tbcomponent\f[R](1),
\f[C]tbcore\f[R](1), \f[C]tblog\f[R](1), \f[C]tbnode\f[R](1),
\f[C]tbrelease\f[R](1), \f[C]tbresource\f[R](1), \f[C]tbservice\f[R](1),
\f[C]tbsubsystem\f[R](1), \f[C]tbsystem\f[R](1), \f[C]tbuser\f[R](1)
