.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "tbnode" "1" "2020-06-11" "Tbricks" "tbnode man page"
.hy
.SH NAME
.PP
\f[C]tbnode\f[R] \[en] lists available nodes and sets their properties.
.SH SYNOPSIS
.PP
\f[C]tbnode\f[R] [\f[C]help\f[R]]
.PP
\f[C]tbnode list\f[R] [<node>]
.PP
\f[C]tbnode destroy\f[R] [\f[C]-vd\f[R]] <node>
.PP
\f[C]tbnode set\f[R] [<property>=<value> <node>]
.PP
\f[C]tbnode clear\f[R] [<property>[,<property>]\&... <node>]
.PP
\f[C]tbnode get\f[R] [[<property>[,<property>]]\&... <node>]
.PP
\f[C]tbnode getenv\f[R] [[<variable>[,<variable>]]\&... <node>]
.PP
\f[C]tbnode setenv\f[R] <variable>=<value> <node>
.PP
\f[C]tbnode clearenv\f[R] <variable>[,<variable>\&...] <node>
.PP
\f[C]tbnode history\f[R]
.SH DESCRIPTION
.PP
The \f[C]tbnode\f[R] command lists which nodes are available to the
Tbricks system and sets their properties.
.PP
A Tbricks node is a logical construct that corresponds to a specific
physical host, which may potentially change over time (e.g.\ if hardware
is replaced).
.PP
Nodes are automatically made available to the system when the AdminAgent
software is running on the machine by using Zeroconf, so no additional
configuration is required to add a new node apart from installing the
administrative software on it.
.PP
The first time a node makes itself available to the network it will
automatically be assigned a short name and get default parameters
assigned to its attributes by the AdminCenter.
.SS Identifiers
.PP
Please see \f[C]tbintro\f[R](1) for information about the identifiers
used.
.SS Properties
.PP
Every node has a set of properties that are used to appropriately
display node characteristics, as well as describing the node to allow
for more intelligent automatic layout of components over the available
nodes.
.PP
The identifier provides a persistent unique identifier (an UUID), that
is assigned at creation time.
It is typically used for cross references and/or scripts that require
that the identifier will not change.
The identifier cannot be changed by the user.
.TP
\f[B]\f[CB]identifier\f[B]\f[R]
The UUID uniquely identifying this node.
.PP
\f[B]The following properties can be set by a user:\f[R]
.TP
\f[B]\f[CB]short_name\f[B]\f[R]
A short name that is used to identify the node.
.TP
\f[B]\f[CB]host\f[B]\f[R]
Either a DNS hostname or the actual ip address of the host that the node
corresponds to.
.TP
\f[B]\f[CB]compression_group\f[B]\f[R]
Compression group name the node belongs to.
.PP
Traffic between services running on the nodes with the different
compression group is compressed.
.PP
Also traffic compressed if one of the node has an empty compression
group name (default value).
.PP
Traffic is not compressed if both nodes have the same compression group
name.
.PP
\f[B]The following properties specify display attributes for the
node:\f[R]
.TP
\f[B]\f[CB]name\f[B]\f[R]
The display name of the node, used for user presentation only.
The default name is the same as the \f[C]host\f[R] property.
.TP
\f[B]\f[CB]description\f[B]\f[R]
A longer description of the node and its intended usage.
The description is not set by default.
.PP
\f[B]The following attributes describe the storage root paths for the
node:\f[R]
.TP
\f[B]\f[CB]system_root\f[B]\f[R]
The path where under the administrative infrastructure will store
releases on this node.
.RS
.PP
By default, a subdirectory called \f[B]releases\f[R] will be created in
this directory, which should be considered opaque.
.PP
The default is \f[C]/opt/tbricks/\f[R]
.RE
.TP
\f[B]\f[CB]persistence_root\f[B]\f[R]
The path where under services will store their databases by default on
this node.
.RS
.PP
The default is \f[C]/opt/tbricks/persistence/\f[R]
.RE
.TP
\f[B]\f[CB]persistence_log_root\f[B]\f[R]
The path where services will store their transactional logs.
The default is \f[C]/opt/tbricks/persistencelog\f[R]
.TP
\f[B]\f[CB]fast_persistence_root\f[B]\f[R]
The path where under services will store their databases if configured
to use \f[C]fast_persistence\f[R] on this node.
The default is \f[C]/opt/tbricks/fastpersistence/\f[R]
.TP
\f[B]\f[CB]fast_persistence_log_root\f[B]\f[R]
The path where services will store their transactional logs if
configured to use \f[C]fast_persistence\f[R] on this node.
The default is \f[C]/opt/tbricks/fastpersistencelog\f[R]
.TP
\f[B]\f[CB]audit_root\f[B]\f[R]
The path where under services will store their audit databases by
default on this node.
Th default is /opt/tbricks/audit/\[ga]
.TP
\f[B]\f[CB]log_root\f[B]\f[R]
The path where services will store their log databases.
The default is \f[C]/opt/tbricks/logs/\f[R]
.TP
\f[B]\f[CB]trace_root\f[B]\f[R]
The path where trace sessions will store their trace data.
The default is \f[C]/opt/tbricks/logs/traces/\f[R]
.TP
\f[B]\f[CB]tmp_root\f[B]\f[R]
The root path under which services configured on this node should
persist small temporary files.
This is typically a tmpfs based backend (such as \f[C]/tmp/\f[R]).
The default is \f[C]/tmp/.tbricks/\f[R]
.TP
\f[B]\f[CB]shmem_root_directory\f[B]\f[R]
The directory for shared memory files.
By default, \f[C]/dev/shm\f[R] for Linux.
.PP
\f[B]The following properties specify node properties that are useful
for scheduling components automatically.\f[R]
.PP
They are automatically set when the node is added to the system.
These values are not used by services during runtime and have no effect
on runtime performance.
.TP
\f[B]\f[CB]cpu\f[B]\f[R]
The number of CPU cores available on the node.
.TP
\f[B]\f[CB]memory\f[B]\f[R]
The amount of RAM available in the node, in GB.
.TP
\f[B]\f[CB]storage\f[B]\f[R]
Set to 1 if the node is a preferred node for storing/persisting larger
datasets.
.SH SUBCOMMANDS
.PP
All subcommands that modify state are logged persistently to the history
log in their original form.
.PP
The \f[C]tbnode\f[R] command provides subcommands to list available
nodes, set and get node properties, and provide information about
historically issued commands.
.PP
\f[B]The following subcommands are supported:\f[R]
.TP
\f[B]\f[CB]tbnode\f[B]\f[R] [\f[B]\f[CB]help\f[B]\f[R]]
Displays usage of the tool, including available subcommands and options.
.TP
\f[B]\f[CB]tbnode list\f[B]\f[R] [<node>]
Lists all nodes or a single specified node configured in the system and
key properties.
.TP
\f[B]\f[CB]tbnode destroy\f[B]\f[R] [\f[B]\f[CB]-vd\f[B]\f[R]] <node>
Permanently removes a node from the central configuration database,
usually done after decommissioning a certain hardware host.
If the administration infrastructure is active on the host which the
node was mapped to, a new node will typically immediately be created.
.RS
.TP
\f[B]\f[CB]-v\f[B]\f[R]
Provide verbose information about the operation.
.TP
\f[B]\f[CB]-d\f[B]\f[R]
Forcibly remove all nodes that currently are down.
.RE
.TP
\f[B]\f[CB]tbnode set\f[B]\f[R] [<property>=<value> <node>]
Sets the properties to the given values for the specified node.
.RS
.PP
If neither properties nor node are specified, command lists all possible
properties that can be set.
.PP
Only some properties can be edited.
See the \f[B]Properties\f[R] section for more information on what
properties can be set and their acceptable values.
.RE
.TP
\f[B]\f[CB]tbnode clear\f[B]\f[R] [<property>[,<property>]\&... <node>]
Clears values for the properties for the specified node.
.RS
.PP
If neither properties nor node are specified, command lists all possible
properties that can be cleared.
.RE
.TP
\f[B]\f[CB]tbnode get\f[B]\f[R] [[<property>[,<property>]]\&... <node>]
Displays specified configuration properties for the specified node.
.RS
.PP
If properties to display are not specified, command lists possible
properties for this node.
.PP
If neither properties nor node are specified, command lists all possible
properties on all nodes.
.RE
.TP
\f[B]\f[CB]tbnode getenv\f[B]\f[R] [[<variable>[,<variable>]]\&... <node>]
Displays specified environment variables for processes on the specified
node.
.RS
.PP
If variables to display are not specified, command lists possible
variables for processes on this node.
.PP
If neither variables nor node are specified, command lists all variables
on all nodes.
.RE
.TP
\f[B]\f[CB]tbnode setenv\f[B]\f[R] <variable>=<value> <node>
Sets the environment variable to the given value for the node.
.TP
\f[B]\f[CB]tbnode clearenv\f[B]\f[R] <variable>[,<variable>\&...] <node>
Clears specified environment variables for the given node.
.TP
\f[B]\f[CB]tbnode history\f[B]\f[R]
Displays the history of all \f[C]tbnode\f[R] commands successfully
issued that affect persisted state.
The history output provides information on from which node, what user,
and what command was issued at what point in time.
.SH OPTIONS
.TP
\f[B]\f[CB]--parsable\f[B]\f[R]
When used in conjunction with subcommands, the output is displayed in a
machine-parsable format.
.SH EXAMPLES
.PP
\f[B]Listing all available nodes\f[R]
.IP
.nf
\f[C]
$ tbnode list
Node         Host                  Interface              Name      Local time   CPU   Mem  Storage  Status
------------------------------------------------------------------------------------------------------------
node1  node1.tbricks.com  10.200.144.5, 10.200.148.15    Storage    15:50 CEST    4     4      0       OK
node2  node2.tbricks.com  10.200.144.6, 10.200.148.16    Storage    15:50 CEST    4     4      0       OK
node3  node3.tbricks.com         10.200.144.22         Computation  15:50 CEST   16    16      0       OK
node4  node4.tbricks.com         10.200.144.23         Computation  15:50 CEST   16    16      0       OK
node5      10.0.0.1                   N/A              Development  13:50 UTC     8    16      0      Down
------------------------------------------------------------------------------------------------------------
$
\f[R]
.fi
.PP
\f[B]Setting a node property\f[R]
.IP
.nf
\f[C]
$ tbnode set persistence_root=\[dq]/opt/tbricks/persistence/\[dq] node1
$
\f[R]
.fi
.PP
\f[B]Getting a node property\f[R]
.IP
.nf
\f[C]
$ tbnode get persistence_root node1
 /opt/tbricks/persistence/
$
\f[R]
.fi
.PP
\f[B]Getting all node properties\f[R]
.IP
.nf
\f[C]
$ tbnode get node1
name: Storage node
description: Storage node for order, strategies and trades.
short_name: node1
cpu: 4
memory: 4
storage: 1
identifier: c7da1cf1-1dd1-11b2-98c7-00144f2a1684
persistence_root: /opt/tbricks/persistence/
persistence_log_root: /opt/tbricks/persistencelog/
fast_persistence_root: /opt/tbricks/fastpersistence/
fast_persistence_log_root: /opt/tbricks/fastpersistencelog/
audit_root: /opt/tbricks/audit/
system_root: /opt/tbricks/
log_root: /opt/tbricks/logs/
trace_root: /opt/tbricks/logs/traces/
tmp_root: /tmp/.tbricks/
$
\f[R]
.fi
.PP
\f[B]Destroy node\f[R]
.IP
.nf
\f[C]
$ tbnode destroy node5
$
\f[R]
.fi
.SH EXIT STATUS
.PP
The following exit values are returned:
.IP \[bu] 2
0: Successful completion.
.IP \[bu] 2
1: An error occurred.
.IP \[bu] 2
2: Invalid command line options were specified.
.SH SEE ALSO
.PP
\f[C]tbintro\f[R](1), \f[C]tbaudit\f[R](1), \f[C]tbcomponent\f[R](1),
\f[C]tbcore\f[R](1), \f[C]tblog\f[R](1), \f[C]tbnode\f[R](1),
\f[C]tbrelease\f[R](1), \f[C]tbresource\f[R](1), \f[C]tbservice\f[R](1),
\f[C]tbsubsystem\f[R](1), \f[C]tbsystem\f[R](1), \f[C]tbuser\f[R](1)
