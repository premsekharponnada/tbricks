#pragma once

//****************************************************************************************
// Tbricks App API
//
// Copyright (c) 2019 Itiviti Group AB.
// Itiviti (R) is a registered trademark of Itiviti Group AB, Sweden. All rights reserved.
//
// PositionByRootStrategyFilter, matches updates of concrete portfolio instance.
//****************************************************************************************

#include "strategy/stream_filter/PositionFilter.h"
#include "strategy/Strategy.h"

namespace tbricks {

/**
 * PositionByRootStrategyFilter matches concrete position instance updates,
 * selected by strategy identifier.
 */
class STRATEGY_EXPORT PositionByRootStrategyFilter : public PositionFilterCondition
{
public:
    /**
     * Makes a filter to match all the positions with the specified strategy
     *
     * @param strategy                      strategy instance.
     */
    PositionByRootStrategyFilter(const Strategy & strategy);

    /**
     * Makes a filter to match all the positions with the specified strategy
     *
     * @param strategy                      strategy instance.
     */
    PositionByRootStrategyFilter(const StrategyIdentifier & strategy_id);
    PositionByRootStrategyFilter(const PositionByRootStrategyFilter & filter) = default;
    PositionByRootStrategyFilter & operator=(const PositionByRootStrategyFilter & filter) = default;

    virtual void Clear() { m_strategy_id.Clear(); }
    virtual tbricks::filter::FieldFilter GetValue() const;
    virtual bool Empty() const { return m_strategy_id.Empty(); }

protected:
    virtual std::ostream & Print(std::ostream & strm) const;

private:
    StrategyIdentifier m_strategy_id;
};

/**
 * PositionByAncestorFilter matches positions that have strategy
 * identifier provided as a filter argument in their inheritance tree.
 *
 *           S0
 *          /  \
 *         S1  S2
 *        / |  | \
 *      S3 S4  S5 S6
 *
 * If a strategy open stream with the identifier of S1, it should see
 * any positions generated by S1 or its child apps.
 */
class STRATEGY_EXPORT PositionByAncestorFilter : public PositionFilterCondition
{
public:
    /**
     * Constructor.
     *
     * Makes a filter to match all the positions
     * having an ancestor node and root node as specified in the input parameter.
     *
     * @param ancestor              StrategyIdentifier to specify the ancestor strategy.
     * @param root                  StrategyIdentifier to specify the root strategy.
     *
     */
    PositionByAncestorFilter(const StrategyIdentifier & ancestor, const StrategyIdentifier & root);

    virtual void Clear()
    {
        m_ancestor.Clear();
        m_root.Clear();
    }
    virtual bool Empty() const { return m_ancestor.Empty() && m_root.Empty(); }

    virtual tbricks::filter::FieldFilter GetValue() const;

protected:
    virtual std::ostream & Print(std::ostream & strm) const;

private:
    StrategyIdentifier m_ancestor;
    StrategyIdentifier m_root;
};
}
