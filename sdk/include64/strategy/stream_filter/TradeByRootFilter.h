#pragma once

//****************************************************************************************
// Tbricks App API
//
// Copyright (c) 2019 Itiviti Group AB.
// Itiviti (R) is a registered trademark of Itiviti Group AB, Sweden. All rights reserved.
//
// TradeByRootFilter, matches all trades originated from strategy tree.
//****************************************************************************************

#include "strategy/Strategy.h"
#include "strategy/StrategyData.h"
#include "strategy/type/Identifier.h"
#include "strategy/stream_filter/TradeFilter.h"

namespace tbricks {

/**
 * TradeByRootFilter matches all trades generated in response to orders
 * originated by strategies with a given root identifier, in other words,
 * all trades generated by a strategy tree. For example, if S1 is a
 * strategy inheritance tree root, its direct descendants are S2, S3 and S4,
 * and S4 in addition is a parent of S5, the filter for S1 will match all
 * orders generated by any of aforementioned strategies.
 */
class STRATEGY_EXPORT TradeByRootFilter : public TradeFilterCondition
{
public:
    /**
     * Constructor.
     *
     * Makes a filter to match all the trades generated from
     * root strategy as specified in the input parameter.
     *
     * @param root                          Instance of strategy to specify the root strategy.
     */
    TradeByRootFilter(const Strategy & root);

    /**
     * Constructor.
     *
     * Makes a filter to match all the trades generated from
     * root strategy as specified by the StrategyData instance in the
     * input parameter.
     *
     * @param root                         Instance of the StrategyData to specify
                                           the root strategy.
     */
    TradeByRootFilter(const StrategyData & root);

    /**
     * Constructor.
     *
     * Makes a filter to match all the trades generated from
     * root strategy as specified by the StrategyIdentifier instance in the
     * input parameter.
     *
     * @param root                         Instance of the StrategyIdentifier to specify
                                           the root strategy.
     */
    TradeByRootFilter(const StrategyIdentifier & root);
    TradeByRootFilter(const TradeByRootFilter & filter);

    TradeByRootFilter & operator=(const TradeByRootFilter & filter);

    virtual void Clear();
    virtual tbricks::filter::FieldFilter GetValue() const;
    virtual bool Empty() const;

protected:
    virtual std::ostream & Print(std::ostream & strm) const;

private:
    StrategyIdentifier m_root;
};
}
