#pragma once

//****************************************************************************************
// Tbricks App API
//
// Copyright (c) 2019 Itiviti Group AB.
// Itiviti (R) is a registered trademark of Itiviti Group AB, Sweden. All rights reserved.
//
// TradeByAncestorFilter, matches all trades generated by any of the
// descendants in strategy inheritance tree.
//****************************************************************************************

#include "strategy/Strategy.h"
#include "strategy/StrategyData.h"
#include "strategy/type/Identifier.h"
#include "strategy/stream_filter/TradeFilter.h"

namespace tbricks {

/**
 * TradeByAncestorFilter matches all trades generated by any of the descendants
 * in strategy inheritance tree starting from strategy identifier provided as
 * a filter argument. In other words, if strategy S1 is parent for S2, S2 is
 * parent for S3 and S4, filter based on S2 will match all trades generated in
 * response to orders issued directly by either S2, S3 or S4.
 */
class STRATEGY_EXPORT TradeByAncestorFilter : public TradeFilterCondition
{
public:
    /**
     * Create a filter that matches all trades generated by a given strategy
     * instance.
     *
     * @param ancestor          Instance of Strategy to specify ancestor strategy.
     */
    TradeByAncestorFilter(const Strategy & ancestor);

    /**
     * Constructor.
     *
     * Create a filter that matches all trades generated by the
     * specified ancestor strategy and root strategy.
     *
     *
     * @param ancestor_id       Instance of Strategy to specify ancestor strategy.
     * @param root_id           Instance of Strategy to specify root strategy.
     */
    TradeByAncestorFilter(const StrategyIdentifier & ancestor_id, const StrategyIdentifier & root_id);
    TradeByAncestorFilter(const TradeByAncestorFilter & filter);

    TradeByAncestorFilter & operator=(const TradeByAncestorFilter & filter);

    virtual void Clear();
    virtual tbricks::filter::FieldFilter GetValue() const;
    virtual bool Empty() const;

protected:
    virtual std::ostream & Print(std::ostream & strm) const;

private:
    StrategyIdentifier m_root;
    StrategyIdentifier m_ancestor;
};
}
